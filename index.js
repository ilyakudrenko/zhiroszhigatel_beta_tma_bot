const TelegramBot = require('node-telegram-bot-api');
const token = '7761056672:AAEe8gPZjn3L47D-nrQvUOtAA3nPNnMVfzM';
const bot = new TelegramBot(token, {polling: true});
const webAppUrl = 'https://zhiroazhigatel.netlify.app/';

// Matches "/echo [whatever]"
bot.onText(/\/echo (.+)/, (msg, match) => {
    // 'msg' is the received Message from Telegram
    // 'match' is the result of executing the regexp above on the text content
    // of the message

    const chatId = msg.chat.id;
    const resp = match[1]; // the captured "whatever"

    // send back the matched "whatever" to the chat
    bot.sendMessage(chatId, resp);
});

// Listen for any kind of message. There are different kinds of
// messages.
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if(text === '/start') {
        await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ñ–∏—Ä–æ—Å–∂–∏–≥–∞—Ç–µ–ª—å! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥—É—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤–∞—Å. –£–¥–∞—á–∏ –∏ —É—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫! üí™üî•', {

        })

        await bot.sendMessage(chatId, '–ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–∏–∫—É–¥–∞', {
            reply_markup: {
                inline_keyboard: [
                    [{text: '–í–æ–π—Ç–∏', web_app: {url: webAppUrl}}]
                ]
            }
        })
    }


});



// üí∞ Handle /buy command to request payment with Telegram Stars
bot.onText(/\/buy/, async (msg) => {
    const chatId = msg.chat.id;

    try {
        await bot.sendInvoice(
            chatId,
            "–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", // ‚úÖ Title (REQUIRED)
            "–î–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–º—É –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", // ‚úÖ Description (REQUIRED)
            `purchase_${chatId}_${Date.now()}`, // ‚úÖ Unique Payload (Order ID)
            "", // ‚úÖ Leave provider_token empty for Telegram Stars
            "XTR", // ‚úÖ Currency for Telegram Stars
            [
                { label: "–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", amount: 1 } // ‚úÖ 500 Stars
            ],
            {
                need_name: false,
                need_phone_number: false,
                need_email: false,
                need_shipping_address: false,
                send_phone_number_to_provider: false,
                send_email_to_provider: false,
                is_flexible: false
            }
        );

        console.log("‚úÖ –ò–Ω–≤–æ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!");

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω–≤–æ–π—Å–∞:", error);
    }
});

// ‚úÖ Handle successful payments
bot.on("pre_checkout_query", async (query) => {
    await bot.answerPreCheckoutQuery(query.id, true);
});

// ‚úÖ Handle successful payments (confirm training plan purchase)
bot.on("successful_payment", async (msg) => {
    const chatId = msg.chat.id;
    const paymentInfo = msg.successful_payment;
    let payload;

    try {
        // Check if payload is valid JSON or just a plain string
        if (paymentInfo.invoice_payload.startsWith("{")) {
            payload = JSON.parse(paymentInfo.invoice_payload); // If JSON, parse it
        } else {
            payload = { order_id: paymentInfo.invoice_payload }; // Otherwise, store as a string
        }

        console.log("‚úÖ –û–ø–ª–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", paymentInfo);

        // Extract user_id and training_id from payload (if available)
        const userId = payload.user_id || chatId;
        const trainingId = payload.training_id || "default_training_plan";

        // Here, you should save the purchase to a database or give the user access
        await bot.sendMessage(chatId, `üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.`);

    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏:", error);
        bot.sendMessage(chatId, "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.");
    }
});

console.log("üöÄ Bot is ready!");